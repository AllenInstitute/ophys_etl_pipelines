version: 2.1
orbs:
  python: circleci/python@1.4

commands:
  build_docker:
    parameters:
      build_name:
        type: string
      python_version:
        type: string
      tag:
        type: string
      dockerfile_name:
        type: string
    steps:
      - run:
          name: Build << parameters.build_name >> docker image
          command: |
            docker build \
              --build-arg OPHYS_ETL_TAG=${CIRCLE_BRANCH} \
              --build-arg OPHYS_ETL_COMMIT_SHA=${CIRCLE_SHA1} \
              --build-arg PYTHON_VERSION=<< parameters.python_version >> \
              -t alleninstitutepika/ophys_etl_pipelines:<< parameters.tag >> \
              -f docker/<<parameters.dockerfile_name>> docker/
  test:
    parameters:
      test_name:
        type: string
      python_version:
        type: string
      docker_tag:
        type: string
      pytest_mark:
        type: string
      conda_env:
        type: string
      test_directory:
        type: string
        default: tests
      coverage_executable_path:
        type: string
    steps:
      - run:
          name: Run docker image << parameters.test_name >> tests
          # docker runs should succeed with --read-only flag if expected to be
          # run by singularity
          # https://sylabs.io/guides/3.6/user-guide/singularity_and_docker.html#best-practices
          command: |
            set -e
            mkdir -p $PWD/coverage_outputs_<< parameters.python_version >>
            
            # set entrypoint like this so we can handle quotes
            docker run \
              --entrypoint /bin/bash \
              --read-only \
              --tmpfs /tmp \
              -v $PWD/coverage_outputs_<<parameters.python_version>>:/coverage_outputs_<<parameters.python_version>> \
              alleninstitutepika/ophys_etl_pipelines:<<parameters.docker_tag>> \
              /repos/ophys_etl/.circleci/scripts/run_and_test.sh "<<parameters.pytest_mark>>" <<parameters.python_version>> <<parameters.conda_env>> <<parameters.test_name>>.xml <<parameters.test_directory>> <<parameters.coverage_executable_path>>


  build_and_test:
    parameters:
      python_version:
        type: string
    steps:
      - checkout
      - build_docker:
          build_name: "General+suite2p"
          python_version: <<parameters.python_version>>
          tag: ${CIRCLE_SHA1}
          dockerfile_name: "Dockerfile_no_deepinterpolation"
      - build_docker:
          build_name: "DeepInterpolation only"
          python_version: <<parameters.python_version>>
          tag: deepinterpolation_${CIRCLE_SHA1}
          dockerfile_name: "Dockerfile_deepinterpolation"
      - test:
          test_name: "event_detection"
          python_version: <<parameters.python_version>>
          docker_tag: ${CIRCLE_SHA1}
          pytest_mark: "event_detect_only"
          conda_env: event_detection
          coverage_executable_path: "/envs/event_detection/bin/coverage"
      - test:
          test_name: "deepinterpolation"
          python_version: <<parameters.python_version>>
          docker_tag: deepinterpolation_${CIRCLE_SHA1}
          pytest_mark: deepinterpolation_only
          conda_env: ophys_etl
          test_directory: tests/modules/denoising/
          coverage_executable_path: "/usr/local/bin/coverage"
      - test:
          test_name: "general"
          python_version: <<parameters.python_version>>
          docker_tag: ${CIRCLE_SHA1}
          pytest_mark: "not event_detect_only and not deepinterpolation_only"
          conda_env: ophys_etl
          coverage_executable_path: "/envs/ophys_etl/bin/coverage"
  smoke_test_and_push:
    steps:
      - run:
          name: Run docker image smoke test
          command: |
            set -e
            docker run  \
            --read-only \
            --tmpfs /tmp \
            alleninstitutepika/ophys_etl_pipelines:${CIRCLE_SHA1} \
            /envs/ophys_etl/bin/python -m ophys_etl.modules.suite2p_wrapper \
              --h5py \
              /repos/ophys_etl/tests/modules/suite2p_wrapper/resources/movie_100x100x100.h5 \
              --output_dir /tmp \
              --movie_frame_rate 1.0 \
              --log_level INFO \
              --output_json /tmp/output.json
      - run:
          name: Upload docker image
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            if [ "$CIRCLE_BRANCH" = "main" ]
            then
                docker tag alleninstitutepika/ophys_etl_pipelines:${CIRCLE_SHA1} alleninstitutepika/ophys_etl_pipelines:main
                docker push alleninstitutepika/ophys_etl_pipelines:main

                docker tag alleninstitutepika/ophys_etl_pipelines:deepinterpolation_${CIRCLE_SHA1} alleninstitutepika/ophys_etl_pipelines:deepinterpolation_main
                docker push alleninstitutepika/ophys_etl_pipelines:deepinterpolation_main
            else
                docker tag alleninstitutepika/ophys_etl_pipelines:${CIRCLE_SHA1} alleninstitutepika/ophys_etl_pipelines:develop
                docker push alleninstitutepika/ophys_etl_pipelines:develop

                docker tag alleninstitutepika/ophys_etl_pipelines:deepinterpolation_${CIRCLE_SHA1} alleninstitutepika/ophys_etl_pipelines:deepinterpolation_develop
                docker push alleninstitutepika/ophys_etl_pipelines:deepinterpolation_develop
            fi
        
jobs:
  build_and_push:
    machine:
      image: ubuntu-2004:current
    steps:
      - build_and_test:
          python_version: "3.8"
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - matches:
                  pattern: "^/*.*dev.*/*$"
                  value: << pipeline.git.branch >>
          steps:
              - smoke_test_and_push


  lint:
    executor: python/default
    steps:
      - checkout
      - run:
          command: |
            pip install flake8
            # `|| true` to force exit code 0 even if no files found
            CHANGED_PYFILES=$(git diff --diff-filter AMR --name-only origin/main | grep '\.py' || true)
            echo "List of changed files:"
            echo ${CHANGED_PYFILES}
            echo ${CHANGED_PYFILES} | xargs -r flake8 --count
          name: Lint

workflows:
  main:
    jobs:
      - lint
      - build_and_push:
          requires:
            - lint
